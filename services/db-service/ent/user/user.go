// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClerkUserID holds the string denoting the clerk_user_id field in the database.
	FieldClerkUserID = "clerk_user_id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldIsSubscribed holds the string denoting the is_subscribed field in the database.
	FieldIsSubscribed = "is_subscribed"
	// FieldSubscriptionTier holds the string denoting the subscription_tier field in the database.
	FieldSubscriptionTier = "subscription_tier"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSubscription holds the string denoting the subscription edge name in mutations.
	EdgeSubscription = "subscription"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SubscriptionTable is the table that holds the subscription relation/edge.
	SubscriptionTable = "subscriptions"
	// SubscriptionInverseTable is the table name for the Subscription entity.
	// It exists in this package in order to avoid circular dependency with the "subscription" package.
	SubscriptionInverseTable = "subscriptions"
	// SubscriptionColumn is the table column denoting the subscription relation/edge.
	SubscriptionColumn = "user_subscription"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldClerkUserID,
	FieldUsername,
	FieldRole,
	FieldIsSubscribed,
	FieldSubscriptionTier,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ClerkUserIDValidator is a validator for the "clerk_user_id" field. It is called by the builders before save.
	ClerkUserIDValidator func(string) error
	// DefaultRole holds the default value on creation for the "role" field.
	DefaultRole string
	// DefaultIsSubscribed holds the default value on creation for the "is_subscribed" field.
	DefaultIsSubscribed bool
	// DefaultSubscriptionTier holds the default value on creation for the "subscription_tier" field.
	DefaultSubscriptionTier string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClerkUserID orders the results by the clerk_user_id field.
func ByClerkUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClerkUserID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByIsSubscribed orders the results by the is_subscribed field.
func ByIsSubscribed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSubscribed, opts...).ToFunc()
}

// BySubscriptionTier orders the results by the subscription_tier field.
func BySubscriptionTier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionTier, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySubscriptionCount orders the results by subscription count.
func BySubscriptionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubscriptionStep(), opts...)
	}
}

// BySubscription orders the results by subscription terms.
func BySubscription(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSubscriptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubscriptionTable, SubscriptionColumn),
	)
}
