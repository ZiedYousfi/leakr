// Code generated by ent, DO NOT EDIT.

package user

import (
	"db-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// ClerkUserID applies equality check predicate on the "clerk_user_id" field. It's identical to ClerkUserIDEQ.
func ClerkUserID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldClerkUserID, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRole, v))
}

// IsSubscribed applies equality check predicate on the "is_subscribed" field. It's identical to IsSubscribedEQ.
func IsSubscribed(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsSubscribed, v))
}

// SubscriptionTier applies equality check predicate on the "subscription_tier" field. It's identical to SubscriptionTierEQ.
func SubscriptionTier(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSubscriptionTier, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// ClerkUserIDEQ applies the EQ predicate on the "clerk_user_id" field.
func ClerkUserIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldClerkUserID, v))
}

// ClerkUserIDNEQ applies the NEQ predicate on the "clerk_user_id" field.
func ClerkUserIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldClerkUserID, v))
}

// ClerkUserIDIn applies the In predicate on the "clerk_user_id" field.
func ClerkUserIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldClerkUserID, vs...))
}

// ClerkUserIDNotIn applies the NotIn predicate on the "clerk_user_id" field.
func ClerkUserIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldClerkUserID, vs...))
}

// ClerkUserIDGT applies the GT predicate on the "clerk_user_id" field.
func ClerkUserIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldClerkUserID, v))
}

// ClerkUserIDGTE applies the GTE predicate on the "clerk_user_id" field.
func ClerkUserIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldClerkUserID, v))
}

// ClerkUserIDLT applies the LT predicate on the "clerk_user_id" field.
func ClerkUserIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldClerkUserID, v))
}

// ClerkUserIDLTE applies the LTE predicate on the "clerk_user_id" field.
func ClerkUserIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldClerkUserID, v))
}

// ClerkUserIDContains applies the Contains predicate on the "clerk_user_id" field.
func ClerkUserIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldClerkUserID, v))
}

// ClerkUserIDHasPrefix applies the HasPrefix predicate on the "clerk_user_id" field.
func ClerkUserIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldClerkUserID, v))
}

// ClerkUserIDHasSuffix applies the HasSuffix predicate on the "clerk_user_id" field.
func ClerkUserIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldClerkUserID, v))
}

// ClerkUserIDEqualFold applies the EqualFold predicate on the "clerk_user_id" field.
func ClerkUserIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldClerkUserID, v))
}

// ClerkUserIDContainsFold applies the ContainsFold predicate on the "clerk_user_id" field.
func ClerkUserIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldClerkUserID, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldRole, v))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldRole, v))
}

// IsSubscribedEQ applies the EQ predicate on the "is_subscribed" field.
func IsSubscribedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsSubscribed, v))
}

// IsSubscribedNEQ applies the NEQ predicate on the "is_subscribed" field.
func IsSubscribedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsSubscribed, v))
}

// SubscriptionTierEQ applies the EQ predicate on the "subscription_tier" field.
func SubscriptionTierEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSubscriptionTier, v))
}

// SubscriptionTierNEQ applies the NEQ predicate on the "subscription_tier" field.
func SubscriptionTierNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSubscriptionTier, v))
}

// SubscriptionTierIn applies the In predicate on the "subscription_tier" field.
func SubscriptionTierIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSubscriptionTier, vs...))
}

// SubscriptionTierNotIn applies the NotIn predicate on the "subscription_tier" field.
func SubscriptionTierNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSubscriptionTier, vs...))
}

// SubscriptionTierGT applies the GT predicate on the "subscription_tier" field.
func SubscriptionTierGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSubscriptionTier, v))
}

// SubscriptionTierGTE applies the GTE predicate on the "subscription_tier" field.
func SubscriptionTierGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSubscriptionTier, v))
}

// SubscriptionTierLT applies the LT predicate on the "subscription_tier" field.
func SubscriptionTierLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSubscriptionTier, v))
}

// SubscriptionTierLTE applies the LTE predicate on the "subscription_tier" field.
func SubscriptionTierLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSubscriptionTier, v))
}

// SubscriptionTierContains applies the Contains predicate on the "subscription_tier" field.
func SubscriptionTierContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSubscriptionTier, v))
}

// SubscriptionTierHasPrefix applies the HasPrefix predicate on the "subscription_tier" field.
func SubscriptionTierHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSubscriptionTier, v))
}

// SubscriptionTierHasSuffix applies the HasSuffix predicate on the "subscription_tier" field.
func SubscriptionTierHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSubscriptionTier, v))
}

// SubscriptionTierEqualFold applies the EqualFold predicate on the "subscription_tier" field.
func SubscriptionTierEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSubscriptionTier, v))
}

// SubscriptionTierContainsFold applies the ContainsFold predicate on the "subscription_tier" field.
func SubscriptionTierContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSubscriptionTier, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubscriptionTable, SubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.Subscription) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
