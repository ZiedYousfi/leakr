// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"db-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldID, id))
}

// StripeCustomerID applies equality check predicate on the "stripe_customer_id" field. It's identical to StripeCustomerIDEQ.
func StripeCustomerID(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStripeCustomerID, v))
}

// StripeSubscriptionID applies equality check predicate on the "stripe_subscription_id" field. It's identical to StripeSubscriptionIDEQ.
func StripeSubscriptionID(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStripeSubscriptionID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStatus, v))
}

// CurrentPeriodEnd applies equality check predicate on the "current_period_end" field. It's identical to CurrentPeriodEndEQ.
func CurrentPeriodEnd(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrentPeriodEnd, v))
}

// StripeCustomerIDEQ applies the EQ predicate on the "stripe_customer_id" field.
func StripeCustomerIDEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStripeCustomerID, v))
}

// StripeCustomerIDNEQ applies the NEQ predicate on the "stripe_customer_id" field.
func StripeCustomerIDNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldStripeCustomerID, v))
}

// StripeCustomerIDIn applies the In predicate on the "stripe_customer_id" field.
func StripeCustomerIDIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldStripeCustomerID, vs...))
}

// StripeCustomerIDNotIn applies the NotIn predicate on the "stripe_customer_id" field.
func StripeCustomerIDNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldStripeCustomerID, vs...))
}

// StripeCustomerIDGT applies the GT predicate on the "stripe_customer_id" field.
func StripeCustomerIDGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldStripeCustomerID, v))
}

// StripeCustomerIDGTE applies the GTE predicate on the "stripe_customer_id" field.
func StripeCustomerIDGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldStripeCustomerID, v))
}

// StripeCustomerIDLT applies the LT predicate on the "stripe_customer_id" field.
func StripeCustomerIDLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldStripeCustomerID, v))
}

// StripeCustomerIDLTE applies the LTE predicate on the "stripe_customer_id" field.
func StripeCustomerIDLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldStripeCustomerID, v))
}

// StripeCustomerIDContains applies the Contains predicate on the "stripe_customer_id" field.
func StripeCustomerIDContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldStripeCustomerID, v))
}

// StripeCustomerIDHasPrefix applies the HasPrefix predicate on the "stripe_customer_id" field.
func StripeCustomerIDHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldStripeCustomerID, v))
}

// StripeCustomerIDHasSuffix applies the HasSuffix predicate on the "stripe_customer_id" field.
func StripeCustomerIDHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldStripeCustomerID, v))
}

// StripeCustomerIDEqualFold applies the EqualFold predicate on the "stripe_customer_id" field.
func StripeCustomerIDEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldStripeCustomerID, v))
}

// StripeCustomerIDContainsFold applies the ContainsFold predicate on the "stripe_customer_id" field.
func StripeCustomerIDContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldStripeCustomerID, v))
}

// StripeSubscriptionIDEQ applies the EQ predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDNEQ applies the NEQ predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDIn applies the In predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldStripeSubscriptionID, vs...))
}

// StripeSubscriptionIDNotIn applies the NotIn predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldStripeSubscriptionID, vs...))
}

// StripeSubscriptionIDGT applies the GT predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDGTE applies the GTE predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDLT applies the LT predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDLTE applies the LTE predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDContains applies the Contains predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDHasPrefix applies the HasPrefix predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDHasSuffix applies the HasSuffix predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDEqualFold applies the EqualFold predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldStripeSubscriptionID, v))
}

// StripeSubscriptionIDContainsFold applies the ContainsFold predicate on the "stripe_subscription_id" field.
func StripeSubscriptionIDContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldStripeSubscriptionID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldStatus, v))
}

// CurrentPeriodEndEQ applies the EQ predicate on the "current_period_end" field.
func CurrentPeriodEndEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndNEQ applies the NEQ predicate on the "current_period_end" field.
func CurrentPeriodEndNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndIn applies the In predicate on the "current_period_end" field.
func CurrentPeriodEndIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCurrentPeriodEnd, vs...))
}

// CurrentPeriodEndNotIn applies the NotIn predicate on the "current_period_end" field.
func CurrentPeriodEndNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCurrentPeriodEnd, vs...))
}

// CurrentPeriodEndGT applies the GT predicate on the "current_period_end" field.
func CurrentPeriodEndGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndGTE applies the GTE predicate on the "current_period_end" field.
func CurrentPeriodEndGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndLT applies the LT predicate on the "current_period_end" field.
func CurrentPeriodEndLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndLTE applies the LTE predicate on the "current_period_end" field.
func CurrentPeriodEndLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCurrentPeriodEnd, v))
}

// CurrentPeriodEndIsNil applies the IsNil predicate on the "current_period_end" field.
func CurrentPeriodEndIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldCurrentPeriodEnd))
}

// CurrentPeriodEndNotNil applies the NotNil predicate on the "current_period_end" field.
func CurrentPeriodEndNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldCurrentPeriodEnd))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.NotPredicates(p))
}
