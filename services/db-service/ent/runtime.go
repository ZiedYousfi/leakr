// Code generated by ent, DO NOT EDIT.

package ent

import (
	"db-service/ent/schema"
	"db-service/ent/subscription"
	"db-service/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	subscriptionFields := schema.Subscription{}.Fields()
	_ = subscriptionFields
	// subscriptionDescStripeCustomerID is the schema descriptor for stripe_customer_id field.
	subscriptionDescStripeCustomerID := subscriptionFields[0].Descriptor()
	// subscription.StripeCustomerIDValidator is a validator for the "stripe_customer_id" field. It is called by the builders before save.
	subscription.StripeCustomerIDValidator = subscriptionDescStripeCustomerID.Validators[0].(func(string) error)
	// subscriptionDescStripeSubscriptionID is the schema descriptor for stripe_subscription_id field.
	subscriptionDescStripeSubscriptionID := subscriptionFields[1].Descriptor()
	// subscription.StripeSubscriptionIDValidator is a validator for the "stripe_subscription_id" field. It is called by the builders before save.
	subscription.StripeSubscriptionIDValidator = subscriptionDescStripeSubscriptionID.Validators[0].(func(string) error)
	// subscriptionDescStatus is the schema descriptor for status field.
	subscriptionDescStatus := subscriptionFields[2].Descriptor()
	// subscription.DefaultStatus holds the default value on creation for the status field.
	subscription.DefaultStatus = subscriptionDescStatus.Default.(string)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescClerkUserID is the schema descriptor for clerk_user_id field.
	userDescClerkUserID := userFields[1].Descriptor()
	// user.ClerkUserIDValidator is a validator for the "clerk_user_id" field. It is called by the builders before save.
	user.ClerkUserIDValidator = userDescClerkUserID.Validators[0].(func(string) error)
	// userDescRole is the schema descriptor for role field.
	userDescRole := userFields[3].Descriptor()
	// user.DefaultRole holds the default value on creation for the role field.
	user.DefaultRole = userDescRole.Default.(string)
	// userDescIsSubscribed is the schema descriptor for is_subscribed field.
	userDescIsSubscribed := userFields[4].Descriptor()
	// user.DefaultIsSubscribed holds the default value on creation for the is_subscribed field.
	user.DefaultIsSubscribed = userDescIsSubscribed.Default.(bool)
	// userDescSubscriptionTier is the schema descriptor for subscription_tier field.
	userDescSubscriptionTier := userFields[5].Descriptor()
	// user.DefaultSubscriptionTier holds the default value on creation for the subscription_tier field.
	user.DefaultSubscriptionTier = userDescSubscriptionTier.Default.(string)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[6].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[7].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
